from aiogram import Router, types
from aiogram.filters import CommandStart
from model.classifier import predict, plant_info
import os

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üåø –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è ‚Äî –∏ —è —Å–∫–∞–∂—É, —á—Ç–æ —ç—Ç–æ –∑–∞ –≤–∏–¥!"
    )

@router.message(lambda msg: msg.photo)
async def handle_photo(message: types.Message):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path

    downloaded_path = "data/temp_photo.jpg"
    await message.bot.download_file(file_path, downloaded_path)

    common_name, scientific_name = predict(downloaded_path)

    if os.path.exists(downloaded_path):
        os.remove(downloaded_path)

    if common_name and scientific_name:
        info = plant_info[common_name]
        text = (
            f"üåø **{common_name.capitalize()}**\n"
            f"üß¨ *{scientific_name}*\n"
            f"üè° –°–µ–º–µ–π—Å—Ç–≤–æ: {info['family']}\n"
            f"üìç {info['region']}\n"
            f"üìÖ {info['season']}\n"
            f"üí° {info['uses']}"
        )
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."

    await message.answer(text, parse_mode="Markdown")