import shutil
from pathlib import Path

from aiogram import Router, types
from aiogram.filters import CommandStart
from model.classifier import predict, plant_info, class_names
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
import os

TEMP_DIR = Path("data/temp")
CORRECTIONS_DIR = Path("data/corrections")
TEMP_DIR.mkdir(exist_ok=True)

last_photo_path = None

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üåø –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è ‚Äî –∏ —è —Å–∫–∞–∂—É, —á—Ç–æ —ç—Ç–æ –∑–∞ –≤–∏–¥!"
    )


@router.message(lambda msg: msg.photo)
async def handle_photo(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.id}")

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path

    downloaded_path = "data/temp_photo.jpg"
    await message.bot.download_file(file_path, downloaded_path)
    print(f"‚úÖ –§–æ—Ç–æ —Å–∫–∞—á–∞–Ω–æ: {downloaded_path}")

    common_name, scientific_name = predict(downloaded_path)
    print(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {common_name}, {scientific_name}")

    if os.path.exists(downloaded_path):
        os.remove(downloaded_path)
        print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")

    if common_name and scientific_name:
        info = plant_info[common_name]
        text = (
            f"üåø **{common_name.capitalize()}**\n"
            f"üß¨ *{scientific_name}*\n"
            f"üè° –°–µ–º–µ–π—Å—Ç–≤–æ: {info['family']}\n"
            f"üìç {info['region']}\n"
            f"üìÖ {info['season']}\n"
            f"üí° {info['uses']}"
        )
    else:
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –í–µ—Ä–Ω–æ"), KeyboardButton(text="‚ùå –û—à–∏–±–∫–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    last_photo_path = str(downloaded_path)

    await message.answer(text, parse_mode="Markdown")
    print("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


@router.message(lambda msg: msg.text == "‚ùå –û—à–∏–±–∫–∞")
async def handle_mistake(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–±–µ—Ä—ë–∑–∞"), KeyboardButton(text="–¥—É–±"), KeyboardButton(text="–∫—Ä–∞–ø–∏–≤–∞")],
            [KeyboardButton(text="–º–∞—Ç—å-–∏-–º–∞—á–µ—Ö–∞"), KeyboardButton(text="–æ–¥—É–≤–∞–Ω—á–∏–∫"), KeyboardButton(text="—Ä–æ–∑–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–ê —á—Ç–æ —ç—Ç–æ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ?", reply_markup=keyboard)

@router.message(lambda msg: msg.text in class_names)
async def handle_correction(message: types.Message):
    global last_photo_path
    correct_name = message.text

    if last_photo_path and os.path.exists(last_photo_path):
        target_dir = CORRECTIONS_DIR / correct_name
        target_dir.mkdir(exist_ok=True)
        shutil.copy(last_photo_path, target_dir / f"corrected_{message.from_user.id}.jpg")

        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ —ç—Ç–æ ‚Äî *{correct_name}* üå±",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=ReplyKeyboardRemove())

    last_photo_path = None