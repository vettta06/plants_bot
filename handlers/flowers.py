from aiogram import Router, types
from aiogram.filters import CommandStart
from model.classifier import predict
import os

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üì∏ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Ü–≤–µ—Ç–∫–∞ ‚Äî –∏ —è —Å–∫–∞–∂—É, —á—Ç–æ —ç—Ç–æ –∑–∞ –≤–∏–¥!"
    )

@router.message(lambda msg: msg.photo)
async def handle_photo(message: types.Message):
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path

    downloaded_path = "data/temp_photo.jpg"
    await message.bot.download_file(file_path, downloaded_path)

    common_name, scientific_name = predict(downloaded_path)

    if scientific_name:
        text = f"üå∏ –≠—Ç–æ *{common_name}*!\n"
        text += f"–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: _{scientific_name}_\n\n"
        text += "–•–æ—á–µ—à—å —Å–æ–≤–µ—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —ç—Ç–∏–º —Ü–≤–µ—Ç–∫–æ–º?"
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–≤–µ—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."

    await message.answer(text, parse_mode="Markdown")