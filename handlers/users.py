from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json


router = Router()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–∞–¥–æ–≤–æ–¥! üå±\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å —É—Ä–æ–∂–∞–π –≤–æ–≤—Ä–µ–º—è.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ‚Äî –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–æ–≥–¥–∞ –∏ —á—Ç–æ —Å–∞–∂–∞—Ç—å –≤ —Ç–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ.",
        reply_markup=keyboard
    )


@router.message(lambda msg: msg.location is not None)
async def handle_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude

    await message.answer(
        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {lat:.4f}, {lon:.4f}\n"
        "–û–ø—Ä–µ–¥–µ–ª—è—é —Ç–≤–æ–π —Ä–µ–≥–∏–æ–Ω..."
    )

    try:
        with open("data/garden_data.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–≤—Ä–µ–∂–¥—ë–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.")
        return

    found_region = None
    for region in data["regions"]:
        lat_min, lat_max = region["lat_range"]
        lon_min, lon_max = region["lon_range"]
        if lat_min <= lat <= lat_max and lon_min <= lon <= lon_max:
            found_region = region
            break

    if not found_region:
        await message.answer(
            "üåç –Ø –Ω–µ –∑–Ω–∞—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.\n"
            "–ü–æ–∫–∞ —è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: –ú–æ—Å–∫–æ–≤—Å–∫—É—é, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫—É—é –∏ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫—É—é –æ–±–ª–∞—Å—Ç–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –±–ª–∏–∂–µ –∫ –∫—Ä—É–ø–Ω–æ–º—É –≥–æ—Ä–æ–¥—É (–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫)."
        )
        return

    name = found_region["name"]
    crops = found_region["crops"]

    text = f"üå± –¢—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ: *{name}*\n\n"
    text += "üìÖ –°—Ä–æ–∫–∏ –ø–æ—Å–∞–¥–∫–∏:\n\n"

    for crop, times in crops.items():
        text += f"üìå *{crop.capitalize()}*\n"
        for stage, period in times.items():
            if stage == "sow_indoors":
                text += f"   –ü–æ—Å–µ–≤ (—Ä–∞—Å—Å–∞–¥–∞): {period}\n"
            elif stage == "sow_direct":
                text += f"   –ü–æ—Å–µ–≤ –≤ –≥—Ä—É–Ω—Ç: {period}\n"
            elif stage == "transplant":
                text += f"   –í—ã—Å–∞–¥–∫–∞: {period}\n"
        text += "\n"

    text += "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—á—Ç–µ–Ω—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–º–æ—Ä–æ–∑–∫—É."

    await message.answer(text, parse_mode="Markdown")